name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache test dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/sheldon
            ~/.cache/starship
          key: test-deps-${{ runner.os }}-${{ hashFiles('**/plugins.toml', 'Brewfile') }}
          restore-keys: |
            test-deps-${{ runner.os }}-
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
      
      - name: Run tests
        run: |
          chmod +x tests/install_test.sh
          tests/install_test.sh

  installation-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        mode: [minimal, update]
    runs-on: ${{ matrix.os }}
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup GitHub CLI (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
      
      - name: Setup GitHub CLI (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install gh
      
      - name: Test ${{ matrix.mode }} installation
        run: |
          chmod +x install.sh
          ./install.sh --${{ matrix.mode }}
      
      - name: Verify GitHub CLI integration
        run: |
          gh --version
          # Test basic gh commands that don't require authentication
          gh api rate_limit --jq '.rate.remaining' || echo "Rate limit check failed (expected without auth)"

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      
      - name: Run shellcheck
        run: |
          find . -name "*.sh" -type f -not -path "./node_modules/*" -not -path "./docs/.script.sh" -exec shellcheck {} +
      
      - name: Check script permissions
        run: |
          scripts_missing_exec=()
          while IFS= read -r -d '' script; do
            if [[ ! -x "$script" ]]; then
              scripts_missing_exec+=("$script")
            fi
          done < <(find . -name "*.sh" -type f -not -path "./node_modules/*" -print0)
          
          if [[ ${#scripts_missing_exec[@]} -gt 0 ]]; then
            echo "Scripts missing executable permission:"
            printf '%s\n' "${scripts_missing_exec[@]}"
            exit 1
          fi
          echo "All scripts have correct permissions"

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for secrets in code
        run: |
          # Basic check for potential secrets
          if grep -r -E "(password|secret|token|api_key)\s*=\s*['\"][^'\"]+['\"]" --include="*.sh" --include="*.zsh" .; then
            echo "Potential secrets found in code!"
            exit 1
          fi
          echo "No obvious secrets found"